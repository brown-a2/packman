<?php
// ___  _   __ _  __   _  _  _  _ 
//| o \/ \ / _| |// \_/ |/ \| \| |
//|  _/ o ( (_|  (| \_/ | o | \\ |
//|_| |_n_|\__|_|\\_| |_|_n_|_|\_|
// Pushing packages since 2022
//
// Packman uses Packagist API client
// https://github.com/packagist/private-packagist-api-client

// External variables
define('API_TOKEN', getenv('API_TOKEN'));
define('API_SECRET', getenv('API_SECRET'));
define('PACKAGE_NAME', getenv('PACKAGE_NAME'));
define('PACKAGE_FILE', getenv('PACKAGE_FILE'));
define('PACKAGE_TYPE', getenv('PACKAGE_TYPE'));
define('PACKAGE_DESCRIPTION', getenv('PACKAGE_DESCRIPTION'));
define('PACKAGE_VERSION', getenv('PACKAGE_VERSION'));

// This file is generated by Composer
require_once __DIR__ . '/vendor/autoload.php';

$tmpFile = fopen("tmp.json", "w");

// Add standard Composer.json to package 
$json = '{
    "name": "'. PACKAGE_NAME .'",
    "description": "'. PACKAGE_DESCRIPTION .'",
    "type": "'. PACKAGE_TYPE .'",
    "require": {},
    "version": "'. PACKAGE_VERSION .'"
}';

fwrite($tmpFile, $json);
fclose($tmpFile);

$zip = new ZipArchive;

if ($zip->open(PACKAGE_FILE) === true) {

    // Create a temp file to overwrite composer file if exsits
    $zip->addFile('tmp.json', 'composer.json');
    $zip->close();
    echo 'Success - Release composer.json added.' . PHP_EOL;
} else {
    echo 'Failed - Problem adding new composer.json.' . PHP_EOL;
}

// Authenticate to https://packagist.com/
$client = new \PrivatePackagist\ApiClient\Client();
$client->authenticate(API_TOKEN, API_SECRET);

$package_exists = false;

$packages = $client->packages()->all();

// Loop through and find our package
if (!empty($packages)) {
    foreach ($packages as $package) {
        if ($package['name'] === PACKAGE_NAME) {
            $package_exists = true;
        }
    }
}

if ($package_exists === true) {

    // Update
    echo 'Update exsiting package...' . PHP_EOL;

    $packageName = PACKAGE_NAME;
    $fileName = PACKAGE_FILE;
    $file = file_get_contents($fileName);
    $client->packages()->artifacts()->add($packageName, $file, 'application/zip', $fileName);

    echo 'Success - Package ' . PACKAGE_NAME . ' updated successfully.' . PHP_EOL;
}

if ($package_exists === false) {

    // Create    
    echo 'Create new package...' . PHP_EOL;

    $fileName= PACKAGE_FILE;
    $file=file_get_contents($fileName);
    $response=$client->packages()->artifacts()->create($file, 'application/zip', $fileName);
    $artifactId=$response['id'];
    $client->packages()->createArtifactPackage([$artifactId]);

    echo 'Success - Package uploaded' . PHP_EOL;
}
